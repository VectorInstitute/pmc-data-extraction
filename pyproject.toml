[tool.poetry]
name = "openpmcvl"
version = "0.1.0"
description = "A toolkit to download, process, analyze and bechmark OpenPMC-VL"
authors = ["Vector AI Engineering <ai_engineering@vectorinstitute.ai>"]
license = "Apache-2.0"
repository = "https://github.com/VectorInstitute/pmc-data-extraction"
readme = "README.md"
packages = [
    { include = "openpmcvl"},
]

[tool.poetry.dependencies]
python = ">=3.10, <3.13"
wandb = "^0.18.5"
torchaudio = "~=2.4.1"
opencv-python = "^4.10.0.84"
timm = "^1.0.11"
datasets = "^3.1.0"
scikit-learn = "^1.5.2"

[tool.poetry.group.mmlearn]
optional = true

[tool.poetry.group.mmlearn.dependencies]
mmlearn = "^0.1.0a0.dev8"

[tool.poetry.group.open_clip]
optional = true

[tool.poetry.group.open_clip.dependencies]
open_clip_torch = "^2.29.0"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
ruff = "^0.7.2"
mypy = "^1.13.0"
pytest = "^8.3.3"
pre-commit = "^4.0.1"
nbqa = { version = "^1.9.0", extras = ["toolchain"] }
pip-audit = "^2.7.3"
pytest-cov = "^3.0.0"
codecov = "^2.1.13"

[tool.mypy]
ignore_missing_imports = true
install_types = true
pretty = true
namespace_packages = true
explicit_package_bases = true
non_interactive = true
warn_unused_configs = true
allow_any_generics = false
allow_subclassing_any = false
allow_untyped_calls = false
allow_untyped_defs = false
allow_incomplete_defs = false
check_untyped_defs = true
allow_untyped_decorators = true
warn_unreachable = false
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
implicit_reexport = false
strict_equality = true
extra_checks = true

[tool.ruff]
include = ["*.py", "pyproject.toml", "*.ipynb"]
line-length = 88

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "D", # pydocstyle
    "E", # pycodestyle
    "F", # pyflakes
    "I", # isort
    "W", # pycodestyle
    "N", # pep8-naming
    "ERA", # eradicate
    "PL", # pylint
]
fixable = ["A", "B", "COM", "C4", "RET", "SIM", "ICN", "Q", "RSE", "D", "E", "F", "I", "W", "N", "ERA", "PL"]
ignore = [
    "B905", # `zip()` without an explicit `strict=` parameter
    "E501", # line too long
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "PLR2004", # Replace magic number with named constant
    "PLR0913", # Too many arguments
    "COM812", # Missing trailing comma
    "N812", # Lower case imported as non-lower case
]

# Ignore import violations in all `__init__.py` files.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401", "F403", "F811"]

[tool.ruff.lint.pep8-naming]
ignore-names = ["X*", "setUp"]

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.pytest.ini_options]
markers = [
    "integration_test: marks tests as integration tests",
]
testpaths = ["tests"]
norecursedirs = ["working"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
